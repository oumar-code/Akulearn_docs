{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"adrs/","title":"Architecture Decision Records (ADRs)","text":"<p>This document serves as the authoritative source for Akulearn's architectural decisions. Each ADR captures the context, decision, and consequences for a major technical or design choice.</p>"},{"location":"adrs/#adr-004-mobile-offline-storage","title":"ADR-004: Mobile Offline Storage","text":"<ul> <li>Implements secure and resilient local data storage for mobile devices, as referenced in guardrails.</li> </ul>"},{"location":"adrs/#additional-adrs","title":"Additional ADRs","text":"<ul> <li>Placeholder for future architecture decisions.</li> </ul>"},{"location":"ai_tutor/","title":"AI Tutor","text":"<p>This document will describe the architecture, algorithms, and features of Akulearn's AI-powered tutoring system.</p>"},{"location":"ai_tutor/#placeholder","title":"Placeholder","text":"<ul> <li>Details on NLP, GenAI, and adaptive learning will be added here.</li> </ul>"},{"location":"api_specs/","title":"API Specifications","text":"<p>This document will contain the OpenAPI/Swagger specifications for Akulearn's backend services.</p>"},{"location":"api_specs/#placeholder","title":"Placeholder","text":"<ul> <li>Initial API endpoints and models will be documented here.</li> </ul>"},{"location":"core_concepts/","title":"Akulearn Core Concepts","text":""},{"location":"core_concepts/#mission-vision","title":"Mission &amp; Vision","text":"<p>To revolutionize access to quality education in Nigeria by combining AI-powered digital learning with physical Projector Hubs. Our ultimate goal is to significantly improve exam success rates and university admission chances for underserved students, while building a sustainable, impact-driven business.</p>"},{"location":"core_concepts/#hybrid-learning-model","title":"Hybrid Learning Model","text":"<p>Akulearn operates a unique hybrid model:</p> <ol> <li>Mobile App: Provides personalized AI tutoring, practice questions, and structured lessons.</li> <li>Projector Hubs: Solar-powered learning centers in schools/communities enabling offline access and group learning.</li> </ol>"},{"location":"core_concepts/#core-monetization-philosophy","title":"Core Monetization Philosophy","text":"<p>\"Don't monetize poverty \u2013 monetize solutions.\" We provide a free first year, monetizing through performance-based success fees, B2G/B2B contracts for Projector Hub leases, corporate CSR partnerships, data licensing, and verified credentials.</p>"},{"location":"core_concepts/#foundational-principles","title":"Foundational Principles","text":"<ul> <li>Accessibility: Education for all, regardless of location or economic status.</li> <li>Personalization: Adaptive learning paths tailored to individual student needs.</li> <li>Impact-Driven: Focus on measurable improvements in student outcomes.</li> <li>Sustainability: A robust business model ensuring long-term viability.</li> <li>Data Security &amp; Privacy: Protecting student information rigorously.</li> </ul>"},{"location":"core_concepts/#key-stakeholders","title":"Key Stakeholders","text":"<ul> <li>Primary/Secondary Students</li> <li>Parents/Guardians</li> <li>Teachers/Facilitators</li> <li>Schools (Public &amp; Private)</li> <li>State Ministries of Education</li> <li>Corporate CSR Divisions</li> <li>NGOs (UNICEF, Mastercard Foundation)</li> <li>Exam Bodies (JAMB, WAEC, NECO)</li> </ul>"},{"location":"finance/","title":"Finance","text":"<p>This document will outline Akulearn's financial model, monetization strategies, and key metrics.</p>"},{"location":"finance/#placeholder","title":"Placeholder","text":"<ul> <li>Revenue streams, cost structure, and financial projections will be added here.</li> </ul>"},{"location":"functional_spec/","title":"Functional Specification","text":""},{"location":"functional_spec/#user-journeys","title":"User Journeys","text":"<p>This section details the core user flows for Akulearn, including onboarding, learning sessions, assessment, credentialing, and facilitator workflows.</p> <ul> <li>Student Onboarding</li> <li>Facilitator Session Workflow</li> <li>Exam Preparation &amp; Practice</li> <li>Credential Verification</li> </ul>"},{"location":"functional_spec/#placeholder-for-detailed-user-flows-and-requirements","title":"Placeholder for detailed user flows and requirements","text":""},{"location":"system_design/","title":"System Design","text":"<p>This document will provide high-level and low-level system design details, including diagrams and technical specifications.</p>"},{"location":"system_design/#placeholder","title":"Placeholder","text":"<ul> <li>Architecture diagrams, data flow, and component interactions will be documented here.</li> </ul>"},{"location":"tech_stack/","title":"Akulearn Technology Stack","text":""},{"location":"tech_stack/#blockchain-integration","title":"Blockchain Integration","text":"<p>All blockchain calls MUST use PolygonService for verified credentials and AkuCoin, as referenced in guardrails.</p>"},{"location":"tech_stack/#core-technologies","title":"Core Technologies","text":"<ul> <li>Python (FastAPI, SQLAlchemy)</li> <li>React Native (Mobile)</li> <li>PostgreSQL</li> <li>Docker, Kubernetes</li> <li>AI/ML: NLP, GenAI</li> </ul>"},{"location":"tech_stack/#placeholder-for-further-tech-stack-details","title":"Placeholder for further tech stack details","text":""},{"location":"00-project-overview/","title":"Akulearn Project Overview","text":""},{"location":"00-project-overview/#our-vision","title":"Our Vision","text":"<p>To create an Africa where quality, personalized, and verifiable education is universally accessible and empowering, transforming lives and fostering a continent of confident, skilled, and future-ready learners. Akulearn envisions a future where every individual, regardless of location or socioeconomic status, can achieve their full learning potential and have their achievements recognized globally.</p>"},{"location":"00-project-overview/#our-mission","title":"Our Mission","text":"<p>Akulearn's mission is to revolutionize education in Nigeria (and eventually Africa) by providing an innovative, hybrid learning ecosystem that leverages technology to deliver accessible, affordable, and highly effective educational content and experiences.</p> <p>We achieve this by:</p> <ul> <li>Bridging the digital divide with a unique hybrid model (mobile app for connected learners, solar-powered projectors for offline/underserved communities)</li> <li>Personalizing learning journeys using advanced AI and Machine Learning</li> <li>Ensuring verifiable achievements through blockchain-based digital credentials</li> <li>Empowering content creators and researchers via a marketplace and native utility token (Aku Coin)</li> <li>Fostering a vibrant learning ecosystem for all stakeholders</li> </ul>"},{"location":"00-project-overview/#core-values","title":"Core Values","text":"<ul> <li>Accessibility: Education for all, regardless of background or location</li> <li>Quality: Engaging, curriculum-aligned, and effective learning experiences</li> <li>Innovation: Leveraging cutting-edge technology (AI, Blockchain)</li> <li>Impact: Driving measurable improvements in learning outcomes and community development</li> <li>Integrity: Operating with transparency, ethics, and accountability</li> <li>Community: Fostering local engagement and empowering facilitators</li> </ul>"},{"location":"00-project-overview/#problem-statement","title":"Problem Statement","text":"<p>Nigeria faces systemic educational challenges:</p> <ul> <li>Over 18 million out-of-school children, especially in rural and Almajiri communities</li> <li>Poor learning outcomes due to overcrowded classrooms, unqualified teachers, and lack of resources</li> <li>Significant digital divide, with uneven access to internet, electricity, and devices</li> <li>Prevalence of certificate fraud undermining trust in academic qualifications</li> <li>Traditional schooling often fails to cater to individual learning paces and styles</li> </ul>"},{"location":"00-project-overview/#solution-overview","title":"Solution Overview","text":"<p>Akulearn delivers a unique hybrid educational platform tailored to Nigeria's realities:</p> <ul> <li>Mobile Application: For urban and semi-urban learners with smartphone access, offering curriculum-aligned video lessons, interactive quizzes, adaptive assessments, and an AI-powered tutor</li> <li>Projector System: Solar-powered, pre-loaded projectors for rural and underserved communities, enabling facilitator-led group learning sessions without reliance on internet or electricity</li> <li>Advanced Technology Integration: AI/ML for personalized learning paths and operational efficiencies; Blockchain for verifiable credentials and secure content ownership</li> </ul>"},{"location":"00-project-overview/#key-differentiators","title":"Key Differentiators","text":"<ul> <li>Hybrid Model: Addresses both connected and unconnected markets with a single integrated platform</li> <li>AI-Powered Personalization: Adaptive learning journeys and instant academic support</li> <li>Blockchain Credentials: Tamper-proof digital certificates and secure content monetization</li> <li>Local Relevance: Curriculum designed for the Nigerian context by local experts</li> <li>Scalable Operations: Built for massive scale, both digitally and physically</li> <li>Strong Social Impact: Appeals to governments, NGOs, and CSR partners, driving brand loyalty and measurable outcomes</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/","title":"Akulearn Project Phase 1 Roadmap","text":""},{"location":"00-project-overview/roadmap-phase-1/#overall-phase-1-goal","title":"Overall Phase 1 Goal","text":"<p>Launch a robust MVP (Mobile App &amp; Projector System) within 18 months, validate the solution in real-world settings, and lay the foundation for scalable, impactful EdTech across Nigeria. Key objectives include:</p> <ul> <li>Deliver core learning experiences to both connected and underserved communities</li> <li>Integrate basic AI for personalized learning</li> <li>Establish operational, support, and feedback mechanisms</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/#methodologies","title":"Methodologies","text":"<ul> <li>Agile (Scrum): Iterative development with 2-week sprints, daily standups, sprint reviews, and retrospectives</li> <li>Cross-Functional Squads: Teams organized by feature (e.g., Authentication, Content, Mobile App), each with backend, frontend, and QA members</li> <li>Continuous Integration/Continuous Deployment (CI/CD): Automated pipelines for building, testing, and deploying code</li> <li>Shift-Left QA: Testers involved from the start, with automated and manual testing throughout</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/#workstreams","title":"Workstreams","text":"<ul> <li>Mobile App Development: User onboarding, curriculum browsing, video playback, quizzes, progress tracking</li> <li>Projector OS Development: Lesson playback, attendance, local storage, sync mechanism</li> <li>Admin Portal: User management, content upload, projector registration</li> <li>Backend &amp; API: Authentication, content delivery, user data storage</li> <li>AI Integration: Personalized recommendations, basic ML model</li> <li>Hardware Prototyping: Alpha projector units, internal testing</li> <li>Pilot Program: Community selection, facilitator recruitment, deployment</li> <li>Testing &amp; QA: System, integration, performance, security</li> <li>Feedback &amp; Refinement: Gather user feedback, iterate on features</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/#sprint-by-sprint-breakdown","title":"Sprint-by-Sprint Breakdown","text":""},{"location":"00-project-overview/roadmap-phase-1/#months-1-3-project-planning-setup","title":"Months 1-3: Project Planning &amp; Setup","text":"<ul> <li>Finalize PRD, FSD, TRD, and project plan</li> <li>Hire core team</li> <li>Set up cloud infrastructure and DevOps pipelines</li> <li>Establish initial backlog and sprint cadence</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/#months-4-9-core-mvp-development","title":"Months 4-9: Core MVP Development","text":"<ul> <li>Mobile App: Build onboarding, curriculum browse, video playback, quizzes, progress tracking</li> <li>Projector OS: Develop lesson playback, manual attendance, local storage, sync</li> <li>Admin Portal: Implement user management, content upload, projector registration</li> <li>Backend &amp; API: Core authentication, content delivery, user data storage</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/#months-10-12-ai-hardware-prototyping","title":"Months 10-12: AI &amp; Hardware Prototyping","text":"<ul> <li>Integrate basic AI for personalized content recommendations</li> <li>Produce and test alpha projector units</li> <li>Plan pilot program, select communities, recruit facilitators</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/#months-13-18-testing-pilot-deployment-launch","title":"Months 13-18: Testing, Pilot Deployment &amp; Launch","text":"<ul> <li>Comprehensive internal and alpha/beta testing (system, integration, performance, security)</li> <li>Deploy MVP projector units to pilot communities</li> <li>Gather facilitator and student feedback</li> <li>Soft launch mobile app, collect user feedback</li> <li>Integrate initial AI tutor (text-based)</li> <li>Refine features based on pilot feedback</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/#key-milestones","title":"Key Milestones","text":"<ul> <li>M1.1 (Month 3): Core team and infrastructure ready</li> <li>M1.2 (Month 9): Mobile app &amp; projector MVP feature freeze</li> <li>M1.3 (Month 12): Initial AI personalization &amp; projector alpha hardware ready</li> <li>M1.4 (Month 18): Pilot program completion &amp; mobile app public launch (Android first)</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/#success-criteria","title":"Success Criteria","text":"<ul> <li>MVP deployed and validated in real-world settings</li> <li>Positive feedback from pilot communities and users</li> <li>Foundational AI features operational</li> <li>Scalable infrastructure and team processes established</li> </ul>"},{"location":"00-project-overview/roadmap-phase-1/#next-steps","title":"Next Steps","text":"<p>Upon successful completion of Phase 1, Akulearn will transition to growth and scaling, expanding features, user base, and operational reach across Nigeria and beyond.</p>"},{"location":"01-architecture/","title":"Akulearn Architecture Overview","text":""},{"location":"01-architecture/#system-design-summary","title":"System Design Summary","text":"<p>Akulearn is built on a scalable, modular microservices architecture designed to support a hybrid learning ecosystem for both connected and underserved communities. The platform leverages cloud-native technologies, containerization, and event-driven communication to ensure reliability, flexibility, and rapid feature delivery.</p>"},{"location":"01-architecture/#key-microservices-components","title":"Key Microservices &amp; Components","text":"<ul> <li>API Gateway: Central entry point for all client requests, handling routing, authentication, and rate limiting.</li> <li>Authentication Service: Manages user registration, login, JWT issuance, and role-based access control (RBAC).</li> <li>Content Management Service (CMS): Handles ingestion, storage, and delivery of curriculum-aligned educational content.</li> <li>User Profile Service: Stores and manages learner, facilitator, and parent profiles, including progress tracking.</li> <li>AI/ML Service: Provides adaptive learning recommendations, personalized quizzes, and powers the AI Tutor.</li> <li>Projector Sync Service: Facilitates data synchronization between offline projector units and the central platform.</li> <li>Blockchain Credentialing Service: Issues and verifies tamper-proof digital certificates and manages content ownership via smart contracts.</li> <li>Admin Portal Service: Supports user management, content uploads, analytics, and projector registration for administrators.</li> <li>Telemetry &amp; Analytics Service: Collects usage data, monitors device health, and generates reports for stakeholders.</li> </ul>"},{"location":"01-architecture/#primary-interactions","title":"Primary Interactions","text":"<ul> <li>Clients (Mobile App, Projector OS, Admin Portal) interact with the platform via the API Gateway.</li> <li>Microservices communicate asynchronously using Kafka (event bus) for scalability and decoupling, and synchronously via REST/gRPC for real-time operations.</li> <li>Data is stored in PostgreSQL (relational), MongoDB (NoSQL), and IPFS/Filecoin (decentralized storage for large content).</li> <li>AI/ML and Blockchain services are integrated for personalized learning and verifiable credentials.</li> </ul>"},{"location":"01-architecture/#high-level-architecture-diagram-mermaid","title":"High-Level Architecture Diagram (Mermaid)","text":"<pre><code>flowchart TD\n    subgraph Clients\n        A1[Mobile App]\n        A2[Projector OS]\n        A3[Admin Portal]\n    end\n    A1 --&gt; GW[API Gateway]\n    A2 --&gt; GW\n    A3 --&gt; GW\n    GW --&gt;|REST/gRPC| AUTH[Authentication Service]\n    GW --&gt;|REST/gRPC| CMS[Content Management Service]\n    GW --&gt;|REST/gRPC| UP[User Profile Service]\n    GW --&gt;|REST/gRPC| ADMIN[Admin Portal Service]\n    GW --&gt;|REST/gRPC| AI[AI/ML Service]\n    GW --&gt;|REST/gRPC| BLOCK[Blockchain Credentialing Service]\n    GW --&gt;|REST/gRPC| SYNC[Projector Sync Service]\n    GW --&gt;|REST/gRPC| TELE[Telemetry &amp; Analytics Service]\n    CMS --&gt;|Kafka| AI\n    CMS --&gt;|Kafka| SYNC\n    UP --&gt;|Kafka| TELE\n    SYNC --&gt;|Kafka| TELE\n    BLOCK --&gt;|Kafka| ADMIN\n    AI --&gt;|Kafka| CMS\n    AI --&gt;|Kafka| UP\n    TELE --&gt;|Kafka| ADMIN\n    CMS --&gt; DB[(PostgreSQL/MongoDB/IPFS)]\n    UP --&gt; DB\n    SYNC --&gt; DB\n    BLOCK --&gt; DB\n</code></pre>"},{"location":"01-architecture/#architectural-highlights","title":"Architectural Highlights","text":"<ul> <li>Scalability: Microservices can be independently deployed and scaled based on demand.</li> <li>Resilience: Event-driven architecture (Kafka) ensures robust communication and fault tolerance.</li> <li>Security: Centralized authentication, RBAC, and encrypted communication (HTTPS) across all services.</li> <li>Extensibility: Modular design allows for easy integration of new features (e.g., E-Library, Higher Ed modules).</li> <li>Observability: Comprehensive logging, monitoring, and analytics for proactive system management.</li> </ul> <p>For more details, see the ADRs and HLD/LLD documents in this section.</p>"},{"location":"01-architecture/hld-lld-content-ingestion/","title":"Content Ingestion Pipeline: High-Level &amp; Low-Level Design","text":""},{"location":"01-architecture/hld-lld-content-ingestion/#high-level-design-hld","title":"High-Level Design (HLD)","text":"<p>The Akulearn Content Ingestion Pipeline enables secure, scalable, and efficient onboarding of user-generated educational content (videos, documents, quizzes) from facilitators and content creators. The pipeline ensures content validation, metadata extraction, storage, and availability for learners across both online and offline modalities.</p>"},{"location":"01-architecture/hld-lld-content-ingestion/#key-components","title":"Key Components","text":"<ul> <li>Content Upload API: Receives content submissions from authenticated users.</li> <li>Validation Service: Checks file types, sizes, and basic compliance (e.g., copyright, format).</li> <li>Metadata Extraction Service: Extracts key metadata (title, subject, grade, tags, duration).</li> <li>Transcoding Service: Converts videos to multiple resolutions/formats for compatibility and bandwidth optimization.</li> <li>Storage Service: Stores content in object storage (IPFS/Filecoin for large files, MongoDB for metadata).</li> <li>Content Review Workflow: Facilitator/SME review and approval before publishing.</li> <li>Notification Service: Alerts users on submission status and review outcomes.</li> <li>Content Indexing: Updates search indexes and recommendation engine.</li> </ul>"},{"location":"01-architecture/hld-lld-content-ingestion/#hld-diagram-mermaid","title":"HLD Diagram (Mermaid)","text":"<pre><code>flowchart TD\n    U[User/Facilitator] --&gt; API[Content Upload API]\n    API --&gt; VAL[Validation Service]\n    VAL --&gt; META[Metadata Extraction]\n    META --&gt; TRAN[Transcoding Service]\n    TRAN --&gt; STORE[Storage Service]\n    STORE --&gt; REVIEW[Content Review Workflow]\n    REVIEW --&gt; INDEX[Content Indexing]\n    INDEX --&gt; RECOMMEND[Recommendation Engine]\n    REVIEW --&gt; NOTIF[Notification Service]\n    NOTIF --&gt; U\n</code></pre>"},{"location":"01-architecture/hld-lld-content-ingestion/#low-level-design-lld","title":"Low-Level Design (LLD)","text":""},{"location":"01-architecture/hld-lld-content-ingestion/#sequence-diagram-mermaid","title":"Sequence Diagram (Mermaid)","text":"<pre><code>sequenceDiagram\n    participant U as User/Facilitator\n    participant API as Content Upload API\n    participant VAL as Validation Service\n    participant META as Metadata Extraction\n    participant TRAN as Transcoding Service\n    participant STORE as Storage Service\n    participant REVIEW as Content Reviewer\n    participant NOTIF as Notification Service\n\n    U-&gt;&gt;API: Submit content (file, metadata)\n    API-&gt;&gt;VAL: Validate file type, size, compliance\n    VAL--&gt;&gt;API: Validation result\n    API-&gt;&gt;META: Extract metadata\n    META--&gt;&gt;API: Metadata\n    API-&gt;&gt;TRAN: Transcode video (if applicable)\n    TRAN--&gt;&gt;API: Transcoded files\n    API-&gt;&gt;STORE: Store files &amp; metadata\n    STORE--&gt;&gt;API: Storage confirmation\n    API-&gt;&gt;REVIEW: Notify for review\n    REVIEW--&gt;&gt;API: Review decision\n    API-&gt;&gt;NOTIF: Notify user of outcome\n    NOTIF--&gt;&gt;U: Submission status\n</code></pre>"},{"location":"01-architecture/hld-lld-content-ingestion/#pseudo-code-content-ingestion-api","title":"Pseudo-Code: Content Ingestion API","text":"<pre><code># Pseudo-code for content upload endpoint\n\ndef upload_content(user, file, metadata):\n    if not validate_user(user):\n        return error('Unauthorized')\n    if not validate_file(file):\n        return error('Invalid file')\n    extracted = extract_metadata(file, metadata)\n    if file.type == 'video':\n        transcoded = transcode_video(file)\n    else:\n        transcoded = file\n    storage_id = store_content(transcoded, extracted)\n    review_id = notify_reviewer(storage_id)\n    return success('Content submitted for review', review_id)\n</code></pre>"},{"location":"01-architecture/hld-lld-content-ingestion/#design-highlights","title":"Design Highlights","text":"<ul> <li>Modular microservices for each pipeline stage</li> <li>Asynchronous processing for scalability</li> <li>Secure authentication and validation at every step</li> <li>Extensible for future content types and review workflows</li> <li>Integrated with recommendation and search systems</li> </ul> <p>For further details, see the ADRs and backend documentation.</p>"},{"location":"01-architecture/adrs/","title":"Akulearn Architectural Decision Records (ADRs)","text":"<p>This page documents key architectural decisions made during the design and development of the Akulearn platform. Each ADR includes its title, status, a summary, and the full content for reference.</p>"},{"location":"01-architecture/adrs/#adr-001-adopt-microservices-architecture","title":"ADR 001: Adopt Microservices Architecture","text":"<p>Status: Accepted</p> <p>Summary: Akulearn will use a microservices architecture to enable independent deployment, scalability, and modularity. This approach supports rapid feature delivery, resilience, and future extensibility.</p> <p>Full Content: Akulearn's platform will be built as a set of loosely coupled microservices, each responsible for a distinct business capability (e.g., authentication, content management, AI/ML, blockchain credentialing). Services will communicate via REST/gRPC for synchronous operations and Kafka for asynchronous event-driven messaging. Containerization (Docker) and orchestration (Kubernetes) will be used for deployment and scaling. This decision enables teams to work independently, improves fault isolation, and allows for technology diversity where needed.</p>"},{"location":"01-architecture/adrs/#adr-002-event-driven-communication-with-kafka","title":"ADR 002: Event-Driven Communication with Kafka","text":"<p>Status: Accepted</p> <p>Summary: Kafka will be used as the central event bus for asynchronous communication between microservices, supporting scalability and decoupling.</p> <p>Full Content: Akulearn's microservices will publish and consume events via Apache Kafka. This enables non-blocking, high-throughput communication, supports real-time analytics, and decouples service dependencies. Event schemas will be versioned for backward/forward compatibility. Idempotency will be enforced in consumers to handle duplicate messages. This approach is critical for features like learning event tracking, content processing triggers, and projector data sync.</p>"},{"location":"01-architecture/adrs/#adr-003-polyglot-persistence","title":"ADR 003: Polyglot Persistence","text":"<p>Status: Accepted</p> <p>Summary: The platform will use multiple database technologies: PostgreSQL for structured transactional data, MongoDB for flexible content metadata, and IPFS/Filecoin for decentralized storage.</p> <p>Full Content: Akulearn will adopt polyglot persistence to optimize data storage for different use cases. PostgreSQL will be used for user profiles, subscriptions, and transactional records. MongoDB will store content metadata, activity logs, and flexible documents. IPFS/Filecoin will handle large, unstructured content (videos, images) for decentralized access and redundancy. This decision improves performance, scalability, and data integrity across the platform.</p>"},{"location":"01-architecture/adrs/#adr-004-api-first-development-with-openapi","title":"ADR 004: API-First Development with OpenAPI","text":"<p>Status: Accepted</p> <p>Summary: All APIs will be designed and documented using OpenAPI/Swagger before implementation, enabling parallel development and consistent interfaces.</p> <p>Full Content: Akulearn's development teams will adopt an API-first approach. API contracts will be defined in OpenAPI/Swagger, reviewed, and agreed upon before backend and frontend implementation begins. This ensures clear boundaries, enables automated client SDK generation, and supports thorough testing. API versioning will be enforced for backward compatibility. This decision streamlines development and improves integration quality.</p>"},{"location":"01-architecture/adrs/#adr-005-secure-authentication-rbac","title":"ADR 005: Secure Authentication &amp; RBAC","text":"<p>Status: Accepted</p> <p>Summary: Authentication will use JWTs, and Role-Based Access Control (RBAC) will be enforced across all services for security and compliance.</p> <p>Full Content: Akulearn will implement stateless authentication using JSON Web Tokens (JWTs). All API endpoints will require authentication, and RBAC will be used to restrict access based on user roles (learner, facilitator, admin, etc.). Sensitive data will be encrypted in transit (HTTPS) and at rest. Secrets will be managed via secure vaults (AWS Secrets Manager, HashiCorp Vault). This decision ensures robust security and regulatory compliance.</p>"},{"location":"01-architecture/adrs/#adr-006-containerization-kubernetes-orchestration","title":"ADR 006: Containerization &amp; Kubernetes Orchestration","text":"<p>Status: Accepted</p> <p>Summary: All services will be containerized with Docker and orchestrated using Kubernetes for deployment, scaling, and management.</p> <p>Full Content: Akulearn's microservices will be packaged as Docker containers. Kubernetes will manage service deployment, scaling, health checks, and rolling updates. Infrastructure as Code (Terraform) will be used for provisioning cloud resources. This approach provides portability, resilience, and operational efficiency, supporting rapid iteration and high availability.</p> <p>For more ADRs and updates, see this page as the project evolves.</p>"},{"location":"02-backend/","title":"Akulearn Backend Development Team Handbook","text":""},{"location":"02-backend/#onboarding","title":"Onboarding","text":"<p>Welcome to the Akulearn backend team! Our mission is to build scalable, secure, and reliable services that power the Akulearn learning ecosystem. New team members should:</p> <ul> <li>Review the Akulearn project vision, architecture overview, and ADRs</li> <li>Set up local development environment (see README and onboarding docs)</li> <li>Familiarize yourself with our codebase, microservices, and API contracts</li> <li>Join team communication channels and introduce yourself</li> </ul>"},{"location":"02-backend/#architecture-principles","title":"Architecture Principles","text":"<ul> <li>Microservices: Each service is independently deployable, with clear boundaries and responsibilities</li> <li>API-First: All APIs are designed and documented before implementation (OpenAPI/Swagger)</li> <li>Event-Driven: Kafka is used for asynchronous communication and decoupling</li> <li>Polyglot Persistence: PostgreSQL for transactional data, MongoDB for flexible content, IPFS/Filecoin for large files</li> <li>Security: JWT authentication, RBAC, encrypted communication, and secrets management</li> <li>Containerization: Docker and Kubernetes for deployment, scaling, and management</li> </ul>"},{"location":"02-backend/#development-workflow","title":"Development Workflow","text":"<ul> <li>Agile Sprints: Work is organized in 2-week sprints with daily standups, sprint planning, reviews, and retrospectives</li> <li>Branching Strategy: Use GitHub Flow for feature branches, pull requests, and code reviews</li> <li>CI/CD: Automated pipelines for linting, testing, building, and deploying services</li> <li>Testing: Unit, integration, and end-to-end tests are required for all public functions and APIs</li> <li>Code Reviews: All changes must be peer-reviewed before merging</li> <li>Documentation: Update API specs, ADRs, and runbooks as features evolve</li> </ul>"},{"location":"02-backend/#tools-technologies","title":"Tools &amp; Technologies","text":"<ul> <li>Languages: Python, Go, Node.js (service-dependent)</li> <li>Frameworks: FastAPI, Flask, Express, SQLAlchemy, GORM</li> <li>Databases: PostgreSQL, MongoDB, Redis</li> <li>Messaging: Kafka</li> <li>DevOps: Docker, Kubernetes, Terraform, GitHub Actions</li> <li>Monitoring: Prometheus, Grafana, ELK Stack</li> <li>Security: JWT, HTTPS, AWS Secrets Manager, HashiCorp Vault</li> <li>Documentation: OpenAPI/Swagger, MkDocs</li> </ul>"},{"location":"02-backend/#communication-collaboration","title":"Communication &amp; Collaboration","text":"<ul> <li>Channels: Slack/Teams for daily communication, GitHub for code, Confluence for documentation</li> <li>Meetings: Daily standups, sprint ceremonies, design reviews, and cross-team syncs</li> <li>Knowledge Sharing: Pair programming, tech talks, and regular code reviews</li> <li>Issue Tracking: Jira for tasks, bugs, and sprint planning</li> </ul>"},{"location":"02-backend/#best-practices","title":"Best Practices","text":"<ul> <li>Prioritize readability, consistency, and simplicity in code</li> <li>Handle errors explicitly and log context for debugging</li> <li>Validate and sanitize all user input</li> <li>Write meaningful tests and maintain high coverage</li> <li>Keep documentation up-to-date</li> <li>Collaborate openly and support your teammates</li> </ul> <p>For more details, see the ADRs, architecture docs, and API specifications in this section.</p>"},{"location":"02-backend/api-specs/","title":"Akulearn API Specifications","text":""},{"location":"02-backend/api-specs/#purpose","title":"Purpose","text":"<p>API specifications define the contract between Akulearn's backend services and client applications (mobile, web, projector OS). They ensure consistency, enable parallel development, and support automated testing and documentation. Akulearn uses the OpenAPI (Swagger) standard for all RESTful APIs.</p> <p>Below are example OpenAPI specifications for the User Authentication and Content APIs.</p>"},{"location":"02-backend/api-specs/#user-authentication-api-openapi-example","title":"User Authentication API (OpenAPI Example)","text":"<pre><code>openapi: 3.0.3\ninfo:\n  title: Akulearn User Authentication API\n  version: 1.0.0\n  description: API for user registration, login, and JWT authentication.\nservers:\n  - url: https://api.akulearn.com/v1\npaths:\n  /auth/register:\n    post:\n      summary: Register a new user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n                role:\n                  type: string\n      responses:\n        '201':\n          description: User registered successfully\n        '400':\n          description: Invalid input\n  /auth/login:\n    post:\n      summary: Login and receive JWT\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n      responses:\n        '200':\n          description: Login successful, JWT returned\n        '401':\n          description: Invalid credentials\n</code></pre>"},{"location":"02-backend/api-specs/#content-api-openapi-example","title":"Content API (OpenAPI Example)","text":"<pre><code>openapi: 3.0.3\ninfo:\n  title: Akulearn Content API\n  version: 1.0.0\n  description: API for uploading, retrieving, and managing educational content.\nservers:\n  - url: https://api.akulearn.com/v1\npaths:\n  /content/upload:\n    post:\n      summary: Upload new educational content\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                title:\n                  type: string\n                subject:\n                  type: string\n                grade:\n                  type: string\n      responses:\n        '201':\n          description: Content uploaded successfully\n        '400':\n          description: Invalid input\n  /content/{id}:\n    get:\n      summary: Retrieve content by ID\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Content retrieved\n        '404':\n          description: Content not found\n</code></pre> <p>For the full API specifications and additional endpoints, see the OpenAPI documentation in this repository.</p>"},{"location":"02-backend/database-schemas/","title":"Akulearn Database Schemas &amp; ERDs","text":""},{"location":"02-backend/database-schemas/#relational-database-postgresql","title":"Relational Database (PostgreSQL)","text":""},{"location":"02-backend/database-schemas/#user-management-schema","title":"User Management Schema","text":"<pre><code>CREATE TABLE users (\n    id UUID PRIMARY KEY,\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    role VARCHAR(50) NOT NULL,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMP\n);\n</code></pre>"},{"location":"02-backend/database-schemas/#coursecontent-schema","title":"Course/Content Schema","text":"<pre><code>CREATE TABLE courses (\n    id UUID PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    subject VARCHAR(100) NOT NULL,\n    grade VARCHAR(50),\n    created_by UUID REFERENCES users(id),\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE contents (\n    id UUID PRIMARY KEY,\n    course_id UUID REFERENCES courses(id),\n    type VARCHAR(50) NOT NULL, -- e.g., video, document, quiz\n    url TEXT NOT NULL,\n    metadata JSONB,\n    created_at TIMESTAMP NOT NULL DEFAULT NOW()\n);\n</code></pre>"},{"location":"02-backend/database-schemas/#learning-analytics-schema","title":"Learning Analytics Schema","text":"<pre><code>CREATE TABLE learning_events (\n    id UUID PRIMARY KEY,\n    user_id UUID REFERENCES users(id),\n    content_id UUID REFERENCES contents(id),\n    event_type VARCHAR(50) NOT NULL, -- e.g., view, complete, quiz_attempt\n    event_data JSONB,\n    timestamp TIMESTAMP NOT NULL DEFAULT NOW()\n);\n</code></pre>"},{"location":"02-backend/database-schemas/#erd-entity-relationship-diagram","title":"ERD (Entity Relationship Diagram)","text":"<pre><code>erDiagram\n    USERS ||--o{ COURSES : creates\n    USERS ||--o{ LEARNING_EVENTS : generates\n    COURSES ||--o{ CONTENTS : contains\n    CONTENTS ||--o{ LEARNING_EVENTS : triggers\n</code></pre>"},{"location":"02-backend/database-schemas/#nosql-database-mongodb","title":"NoSQL Database (MongoDB)","text":""},{"location":"02-backend/database-schemas/#content-metadata-schema","title":"Content Metadata Schema","text":"<pre><code>{\n  \"_id\": \"ObjectId\",\n  \"course_id\": \"UUID\",\n  \"type\": \"string\", // video, document, quiz\n  \"title\": \"string\",\n  \"subject\": \"string\",\n  \"grade\": \"string\",\n  \"tags\": [\"string\"],\n  \"duration\": \"number\", // in seconds\n  \"author\": {\n    \"id\": \"UUID\",\n    \"name\": \"string\"\n  },\n  \"upload_date\": \"ISODate\",\n  \"review_status\": \"string\", // pending, approved, rejected\n  \"metadata\": {\n    // additional flexible fields\n  }\n}\n</code></pre> <p>For further details, see the backend handbook and ADRs.</p>"},{"location":"03-mobile/","title":"Akulearn Mobile Development Guidelines","text":"<p>This section will contain specific guidelines, architecture patterns (such as MVVM), and best practices for developing the Akulearn mobile application. Topics will include:</p> <ul> <li>Recommended architecture and design patterns</li> <li>Offline-first strategies</li> <li>Security and data protection</li> <li>UI/UX standards for accessibility and engagement</li> <li>Integration with backend services and APIs</li> </ul> <p>Check back soon for detailed documentation and examples.</p>"},{"location":"04-iot-projector/","title":"Akulearn IoT Projector Development Guidelines","text":"<p>This section will provide guidelines, technical specifications, and best practices for developing and maintaining the Akulearn IoT projector system. Topics will include:</p> <ul> <li>Hardware and OS requirements</li> <li>Content delivery and offline sync</li> <li>Security and device management</li> <li>Facilitator interface standards</li> <li>Integration with the Akulearn platform</li> </ul> <p>Detailed documentation will be added soon.</p>"},{"location":"05-cross-cutting/","title":"Technical Specifications &amp; Functional Requirements","text":""},{"location":"05-cross-cutting/#feature-1-offline-content-download-consumption","title":"Feature 1: Offline Content Download &amp; Consumption","text":""},{"location":"05-cross-cutting/#functional-requirements","title":"Functional Requirements","text":"<ul> <li>Users can download lessons, videos, and quizzes for offline access.</li> <li>Downloaded content is accessible without internet connectivity.</li> <li>Progress and quiz results are stored locally and synchronized when online.</li> <li>Users can manage downloaded content (view, delete, update).</li> <li>Content integrity is verified before playback.</li> </ul>"},{"location":"05-cross-cutting/#user-stories","title":"User Stories","text":"<ul> <li>As a learner, I want to download lessons so I can study without internet.</li> <li>As a parent, I want my child\u2019s progress to sync automatically when online.</li> <li>As a facilitator, I want to ensure students in rural areas can access content offline.</li> </ul>"},{"location":"05-cross-cutting/#technical-considerations","title":"Technical Considerations","text":"<ul> <li>Local storage management (encrypted, space-efficient)</li> <li>Background download tasks with retry logic</li> <li>Data synchronization (conflict resolution, incremental sync)</li> <li>Content versioning and update notifications</li> <li>Support for multiple device types (Android, iOS, Projector OS)</li> </ul>"},{"location":"05-cross-cutting/#non-functional-requirements","title":"Non-Functional Requirements","text":"<ul> <li>Fast download speeds and reliable resume</li> <li>Secure storage and privacy of user data</li> <li>Robust error handling and user feedback</li> <li>Minimal battery and resource usage</li> </ul>"},{"location":"05-cross-cutting/#feature-2-adaptive-learning-path-generation","title":"Feature 2: Adaptive Learning Path Generation","text":""},{"location":"05-cross-cutting/#functional-requirements_1","title":"Functional Requirements","text":"<ul> <li>The system analyzes learner performance and preferences to recommend personalized content sequences.</li> <li>AI/ML models generate adaptive quizzes and remedial lessons.</li> <li>Learners receive real-time feedback and suggestions for improvement.</li> <li>Facilitators can view and adjust recommended learning paths.</li> <li>All recommendations are explainable and auditable.</li> </ul>"},{"location":"05-cross-cutting/#user-stories_1","title":"User Stories","text":"<ul> <li>As a learner, I want my lessons to adapt to my strengths and weaknesses.</li> <li>As a parent, I want to see how the system personalizes my child\u2019s learning.</li> <li>As a facilitator, I want to guide students through adaptive learning journeys.</li> </ul>"},{"location":"05-cross-cutting/#technical-considerations_1","title":"Technical Considerations","text":"<ul> <li>Integration with AI/ML service for data analysis and recommendations</li> <li>Real-time data collection (quiz scores, lesson completion, engagement)</li> <li>Explainable AI (transparent recommendation logic)</li> <li>Privacy-preserving analytics (anonymized data)</li> <li>API endpoints for fetching and updating learning paths</li> </ul>"},{"location":"05-cross-cutting/#non-functional-requirements_1","title":"Non-Functional Requirements","text":"<ul> <li>High accuracy and relevance of recommendations</li> <li>Low latency for real-time feedback</li> <li>Scalability to support thousands of concurrent learners</li> <li>Compliance with data privacy regulations (NDPR, GDPR)</li> </ul> <p>For more details, see the backend handbook, ADRs, and architecture documentation.</p>"},{"location":"05-cross-cutting/coding-standards/","title":"Akulearn Coding Standards &amp; Best Practices Guide","text":""},{"location":"05-cross-cutting/coding-standards/#general-principles","title":"General Principles","text":"<ul> <li>Readability: Code should be easy to read and understand. Prioritize clarity over cleverness.</li> <li>Consistency: Follow established patterns and styles throughout the codebase.</li> <li>Simplicity: Favor straightforward solutions and avoid unnecessary complexity.</li> <li>Modularity: Break down problems into reusable components (functions, classes, modules).</li> <li>Testability: Design components to be easily testable in isolation.</li> <li>Defensive Programming: Anticipate errors and handle edge cases gracefully.</li> <li>YAGNI: Don't add functionality until it's needed. Avoid premature optimization.</li> <li>DRY: Avoid duplicating code. Abstract common logic into reusable functions or classes.</li> </ul>"},{"location":"05-cross-cutting/coding-standards/#python","title":"Python","text":"<ul> <li>Naming:</li> <li>Variables, functions, methods: <code>snake_case</code></li> <li>Classes: <code>PascalCase</code></li> <li>Constants: <code>UPPER_SNAKE_CASE</code></li> <li>Private members: Prefix with <code>_</code></li> <li>Comments &amp; Docstrings:</li> <li>Explain \"why\" not just \"what\"</li> <li>Use PEP 257 for docstrings</li> <li>Formatting:</li> <li>Use Black and isort</li> <li>4 spaces for indentation</li> <li>Error Handling:</li> <li>Handle errors explicitly, raise specific exceptions</li> <li>Add context to errors for debugging</li> <li>Async:</li> <li>Use <code>asyncio</code> for I/O-bound operations</li> <li>Database:</li> <li>Use SQLAlchemy for PostgreSQL, pymongo for MongoDB</li> </ul>"},{"location":"05-cross-cutting/coding-standards/#go","title":"Go","text":"<ul> <li>Naming:</li> <li>Variables, functions: <code>lowercase</code> for unexported, <code>PascalCase</code> for exported</li> <li>Package names: short, lowercase</li> <li>Comments &amp; Documentation:</li> <li>Use Godoc conventions</li> <li>Formatting:</li> <li>Use <code>go fmt</code> and <code>goimports</code></li> <li>Tabs for indentation</li> <li>Error Handling:</li> <li>Return errors, add context</li> <li>Concurrency:</li> <li>Use goroutines and channels</li> <li>Prefer communication over shared memory</li> <li>Database:</li> <li>Use database/sql, GORM, or SQLBoiler</li> </ul>"},{"location":"05-cross-cutting/coding-standards/#backend-specifics-microservices","title":"Backend Specifics (Microservices)","text":"<ul> <li>API Design:</li> <li>RESTful principles, clear endpoints, versioning (<code>/v1/</code>)</li> <li>Consistent JSON structures, proper status codes</li> <li>Validate all incoming requests</li> <li>Microservice Communication:</li> <li>Kafka for async, REST/gRPC for sync</li> <li>Idempotency for consumers</li> <li>Schema evolution for Kafka messages</li> <li>Database:</li> <li>Separate data access layer</li> <li>Use transactions for multi-step operations</li> <li>Index frequently queried columns</li> <li>Connection pooling</li> <li>Security:</li> <li>JWT authentication, RBAC</li> <li>Input validation &amp; sanitization</li> <li>Secrets management (env vars, vaults)</li> <li>HTTPS everywhere</li> <li>Least privilege principle</li> <li>Testing:</li> <li>Unit, integration, end-to-end tests</li> <li>Mocking frameworks (unittest.mock, gomock)</li> <li>Continuous testing in CI/CD</li> </ul>"},{"location":"05-cross-cutting/coding-standards/#mobile-app-guidelines-kotlinandroid","title":"Mobile App Guidelines (Kotlin/Android)","text":"<ul> <li>Architecture:</li> <li>MVVM, repository pattern, single activity architecture</li> <li>Data Persistence:</li> <li>Room database, WorkManager for background tasks</li> <li>Content encryption</li> <li>UI/UX:</li> <li>Jetpack Compose, responsive design, accessibility</li> <li>Network &amp; Sync:</li> <li>Retrofit for API calls, coroutines for async</li> <li>Connectivity monitoring, idempotent sync</li> <li>Security:</li> <li>HTTPS, secure token storage, input validation</li> <li>ProGuard/R8 for obfuscation</li> </ul>"},{"location":"05-cross-cutting/coding-standards/#frontend-guidelines-reactvue","title":"Frontend Guidelines (React/Vue)","text":"<ul> <li>Component Structure:</li> <li>Modular, reusable components</li> <li>Container/presentational pattern</li> <li>Atomic design (optional)</li> <li>State Management:</li> <li>React Context, Zustand/Jotai, Redux (RTK Query)</li> <li>Vuex for Vue</li> <li>Immutable state</li> <li>Styling:</li> <li>CSS-in-JS or CSS Modules</li> <li>Adhere to design system</li> <li>API Interaction:</li> <li>Axios/Fetch API, error boundaries</li> <li>React Query/SWR for data fetching</li> <li>Performance &amp; Accessibility:</li> <li>Lazy loading, image optimization</li> <li>Semantic HTML, keyboard navigation</li> </ul>"},{"location":"05-cross-cutting/coding-standards/#code-review-quality-assurance","title":"Code Review &amp; Quality Assurance","text":"<ul> <li>Mandatory peer code reviews</li> <li>Use standardized review checklist</li> <li>Automated linting, static analysis, security scanning in CI/CD</li> <li>Strive for high test coverage with meaningful tests</li> </ul> <p>This guide is a living document and will evolve with the Akulearn platform. Adherence to these standards is crucial for building a high-quality, maintainable, and successful product.</p>"},{"location":"06-process-methodology/","title":"Akulearn Process &amp; Methodology Handbook","text":"<p>This section will outline the Agile, DevOps, and project management methodologies used by the Akulearn team. Topics will include:</p> <ul> <li>Agile (Scrum) processes and ceremonies</li> <li>DevOps automation and CI/CD pipelines</li> <li>Team collaboration and communication standards</li> <li>Code review and quality assurance practices</li> </ul> <p>Full documentation will be provided soon.</p>"},{"location":"07-glossary/","title":"Akulearn Project Glossary of Terms","text":""},{"location":"07-glossary/#a","title":"A","text":"<ul> <li>ACID (Atomicity, Consistency, Isolation, Durability): Properties guaranteeing reliable database transactions.</li> <li>ADR (Architectural Decision Record): Document capturing significant architectural decisions.</li> <li>Adaptive Learning: Personalized educational approach using AI/ML to adjust content and learning paths.</li> <li>AI/ML Service: Akulearn microservice for artificial intelligence and machine learning features.</li> <li>Akulearn: The core name of the educational technology platform.</li> <li>Aku Coin (AKU): Akulearn's proprietary cryptocurrency for subscriptions, rewards, and content monetization.</li> <li>API Gateway: Single entry point for microservices, handling routing and security.</li> <li>API Specification: Formal definition of a REST API (e.g., OpenAPI/Swagger).</li> <li>Asynchronous Communication: Pattern where sender does not expect immediate response, often via message queues.</li> <li>Authentication (AuthN): Verifying identity of a user or service.</li> <li>Authorization (AuthZ): Determining permissions for accessing resources or actions.</li> </ul>"},{"location":"07-glossary/#b","title":"B","text":"<ul> <li>Backend as a Service (BaaS): Cloud service model providing ready-to-use backend functionalities.</li> <li>Bearer Token: Security token (typically JWT) granting access to protected resources.</li> <li>Blockchain Credentialing: Issuing and verifying educational certificates as digital assets on a blockchain.</li> </ul>"},{"location":"07-glossary/#c","title":"C","text":"<ul> <li>CDN (Content Delivery Network): Distributed network of servers for caching content closer to users.</li> <li>CI/CD (Continuous Integration/Continuous Deployment): Practices automating software delivery from commit to deployment.</li> <li>CMS (Content Management System/Service): Akulearn microservice for managing educational content.</li> <li>Cold Start Problem: Challenge in recommendation systems with insufficient data for new users/items.</li> <li>Content Embedding: Vector representation of content for similarity search and recommendations.</li> <li>Content Ingestion Pipeline: Automated process for receiving and preparing new educational content.</li> <li>Containerization: Packaging code and dependencies into isolated units (containers).</li> <li>Conversational AI: AI systems interacting with users via natural language (e.g., Akulearn AI Tutor).</li> </ul>"},{"location":"07-glossary/#d","title":"D","text":"<ul> <li>DAO (Data Access Object): Design pattern abstracting data source access.</li> <li>Decentralized Identity (DID): Self-sovereign, verifiable digital identity.</li> <li>DevOps: Practices combining software development and IT operations for continuous delivery.</li> <li>Domain-Driven Design (DDD): Software modeling approach matching domain expert input.</li> <li>DRM (Digital Rights Management): Technologies controlling access to copyrighted material.</li> <li>DRY (Don't Repeat Yourself): Principle stating knowledge/logic should have a single representation.</li> </ul>"},{"location":"07-glossary/#e","title":"E","text":"<ul> <li>EdTech (Educational Technology): Field using technology to improve education.</li> <li>Elasticsearch (ES): Distributed search and analytics engine.</li> <li>ERD (Entity-Relationship Diagram): Visual representation of database entity relationships.</li> <li>Event Bus: Messaging pattern routing events between system parts.</li> <li>Event-Driven Architecture: Services communicate by producing/consuming events.</li> </ul>"},{"location":"07-glossary/#f","title":"F","text":"<ul> <li>Facilitator: Akulearn user role for creating and moderating content.</li> <li>FFmpeg: Suite for handling multimedia files and streams.</li> <li>Functional Requirements: Descriptions of system/feature behaviors.</li> </ul>"},{"location":"07-glossary/#g","title":"G","text":"<ul> <li>GitOps: Framework using Git as source of truth for infrastructure and deployments.</li> <li>Go (Golang): Statically typed, compiled language for backend services.</li> <li>Goroutines: Lightweight concurrent functions in Go.</li> <li>gRPC: High-performance RPC framework for inter-service communication.</li> </ul>"},{"location":"07-glossary/#h","title":"H","text":"<ul> <li>HLD (High-Level Design): Architectural overview of system/components.</li> <li>HTTP Status Codes: Standard codes indicating HTTP request status.</li> <li>HTTPS: Secure HTTP communication using SSL/TLS.</li> </ul>"},{"location":"07-glossary/#i","title":"I","text":"<ul> <li>IoT (Internet of Things): Network of interconnected physical devices.</li> <li>Idempotency: Operation property producing same result on repeated execution.</li> </ul>"},{"location":"07-glossary/#j","title":"J","text":"<ul> <li>JAMB: Nigerian examination board for university admissions.</li> <li>Jetpack Compose: Android toolkit for declarative UI.</li> <li>JSONB: Binary storage format for JSON in PostgreSQL.</li> <li>JWT (JSON Web Token): Compact means of representing claims for authentication/authorization.</li> </ul>"},{"location":"07-glossary/#k","title":"K","text":"<ul> <li>Kafka (Apache Kafka): Distributed streaming platform for event bus.</li> <li>Kotlin: Statically typed language for Android development.</li> <li>K-12 Education: Primary and secondary education levels.</li> </ul>"},{"location":"07-glossary/#l","title":"L","text":"<ul> <li>Learner: Primary Akulearn user role consuming content.</li> <li>LLD (Low-Level Design): Detailed design of modules/components.</li> <li>Logging: Recording events/messages for debugging and insights.</li> </ul>"},{"location":"07-glossary/#m","title":"M","text":"<ul> <li>Microservices: Architectural style structuring applications as loosely coupled services.</li> <li>MongoDB: NoSQL document-oriented database.</li> <li>Monorepo: Single repository holding multiple projects.</li> <li>Multipart Form Data: HTTP content type for file uploads.</li> <li>MVVM: UI architectural pattern separating presentation/business logic.</li> </ul>"},{"location":"07-glossary/#n","title":"N","text":"<ul> <li>NERDC: Nigerian body developing national curriculum.</li> <li>NFT (Non-Fungible Token): Unique digital asset on blockchain.</li> <li>Non-Functional Requirements (NFRs): Criteria for system operation (performance, security, etc.).</li> <li>NoSQL: Non-relational databases for flexible data storage.</li> </ul>"},{"location":"07-glossary/#o","title":"O","text":"<ul> <li>Object Storage: Architecture managing data as objects (e.g., S3, GCS).</li> <li>Offline-First: App design paradigm for offline operation and sync.</li> <li>OpenAPI: Standard for defining RESTful APIs.</li> <li>ORM (Object-Relational Mapper): Technique for converting data between type systems.</li> </ul>"},{"location":"07-glossary/#p","title":"P","text":"<ul> <li>Parent: Akulearn user role monitoring learner progress.</li> <li>Personalized Learning: Adaptive learning approach.</li> <li>Pinecone: Managed vector database for similarity search.</li> <li>Polyglot Persistence: Using multiple data storage technologies.</li> <li>PostgreSQL: Open-source relational database system.</li> <li>Projector OS: Custom OS for Akulearn hardware projectors.</li> <li>Pyramid of Tests: Testing concept prioritizing unit, integration, and end-to-end tests.</li> </ul>"},{"location":"07-glossary/#r","title":"R","text":"<ul> <li>RBAC (Role-Based Access Control): Access control model assigning permissions to roles.</li> <li>REST: Architectural style for stateless client-server communication.</li> <li>Retrofit: HTTP client for Android/Java.</li> <li>Room Database: SQLite abstraction for Android apps.</li> </ul>"},{"location":"07-glossary/#s","title":"S","text":"<ul> <li>SaaS (Software as a Service): Software distribution model via the Internet.</li> <li>SLA (Service Level Agreement): Contract defining service guarantees.</li> <li>Smart Contract: Self-executing contract on blockchain.</li> <li>SQLAlchemy: SQL toolkit and ORM for Python.</li> <li>Swagger: See OpenAPI.</li> <li>Synchronous Communication: Pattern where sender waits for immediate response.</li> </ul>"},{"location":"07-glossary/#t","title":"T","text":"<ul> <li>Telemetry: Collecting/transmitting data from remote devices.</li> <li>Transcoding: Converting media files between formats.</li> <li>TypeScript (TS): JavaScript superset adding static typing.</li> </ul>"},{"location":"07-glossary/#u","title":"U","text":"<ul> <li>UGC (User-Generated Content): Content created/uploaded by users.</li> <li>UI/UX: User Interface/User Experience.</li> <li>UUID: Universally Unique Identifier for distributed systems.</li> </ul>"},{"location":"07-glossary/#v","title":"V","text":"<ul> <li>Vector Database: Database for storing/querying high-dimensional vectors.</li> <li>Verifiable Credential: Cryptographically verifiable digital credential.</li> <li>Vocational Education: Education for trades/careers.</li> </ul>"},{"location":"07-glossary/#w","title":"W","text":"<ul> <li>WAT (West African Time): Time zone for Nigeria.</li> <li>Webhooks: Automated messages sent on events.</li> <li>Weaviate: Open-source vector database.</li> <li>WorkManager: Android library for background work and data sync.</li> </ul> <p>For more terms and updates, see this page as the project evolves.</p>"},{"location":"demo_scripts/offline_demo_segment/","title":"Akulearn AI Tutor Offline Demo Script","text":""},{"location":"demo_scripts/offline_demo_segment/#purpose","title":"Purpose","text":"<p>Showcase the Akulearn AI Tutor's ability to provide instant, intelligent responses even when offline, highlighting its unique value for Nigerian learners.</p>"},{"location":"demo_scripts/offline_demo_segment/#demo-steps","title":"Demo Steps","text":"<ol> <li>Disable Wi-Fi/Mobile Data</li> <li>On the demo device, turn off all internet connections.</li> <li>Open Akulearn App</li> <li>Launch the Akulearn mobile app.</li> <li>Navigate to AI Tutor Chat</li> <li>From the dashboard, tap on \"AI Tutor Chat\".</li> <li>Enter a Query</li> <li>Example: Type \"Explain photosynthesis\" or \"Help me with quadratic equations\".</li> <li>Observe the Response</li> <li>The AI Tutor instantly provides a clear, helpful answer tailored to the query (e.g., offers to explain, give a practice problem, or show a past WAEC question).</li> <li>Highlight the Value</li> <li>Emphasize that this works with no internet, making Akulearn ideal for students in areas with unreliable connectivity.</li> </ol>"},{"location":"demo_scripts/offline_demo_segment/#key-talking-points","title":"Key Talking Points","text":"<ul> <li>\"Akulearn's AI Tutor works even when offline\u2014no data, no problem.\"</li> <li>\"Students can get help with WAEC, JAMB, and core subjects anytime, anywhere.\"</li> <li>\"This is a game-changer for education access in Nigeria.\"</li> </ul>"}]}